
-- Two dashes start a one-line comment.

--[[
     Adding two ['s and ]'s makes it a
     multi-line comment.
--]]

----------------------------------------------------
-- 1. Primary types and values.
----------------------------------------------------

pub init myNum = 42 -- When using literals to create integers, you do not need to specify it type. It will be Int64 Internally. 
pub var myInt : Int32 = 42  -- Explicit type annotation

inferredFLoat = 42.0  -- Again, you do not use to specify type of the variabl when using literals. This will be Float64 internally.
myFloat : Float = 42.0  -- Floats are 64-bit double-precision by default
myDouble : Float64 = 42.0  -- Or you can specify the exact Float type

myBool = true  -- Booleans, with lowercase t.

define PI as const 3.14 end -- Constants are defined with the `define` keyword. They are immutable and must be initialized with a value.

-- Strings are mutable and UTF-8 encoded by default. Strings are also automatic reference counted so you that you don't need to manage their memory.
-- Strings can be created the literal way: double quotes '"' | backticks '`' | triple double quotes '"""'
let myStr = "Hello World" 
let str2 = "all
    strings
    are 
    multi line"

let myChar = 'c'  -- A char is a single lexeme, denoted with single quotes.

let myHex = #AA00FF  -- Hexadecimal.

----------------------------------------------------
-- 1. Conditionals, loops and blocks
----------------------------------------------------


-- If clause. If - else is an expression, so it returns a value. The identifier for if-else must always specify the expected type
-- 
let ifExample : Int = if 1 == 1 => 1 else 2 end

-- Only nil and false are falsy; Everything else is truthy!
if !true => print('it was false') end

-- You can also use the if block in a procedural way, by having all the branches return nothing
let _ : Nothing = 
    if num > 40                 => show "over 40"
    elseif s != 'walternate'    => show "not over 40\n"  -- Defaults to stdout.
    end

-- The Case statement is also an expression, so it returns a value. The identifier for case must always specify the expected type
let caseExample : String = case y 
    is 1 =>
        "one"
    is 2 =>
        return "two"
    end

-- Note: All code blocks are between the do .. end keywords. This is irrespetive of the statement type. if a statement has child statements, then it
-- will be within do .. end
-- the do .. end blocks return the last expression that was evaluated within the block. The last line must be an expression which is of the 
-- same type as the expected return type. You can also use an explicit return statement to return a value
-- This also means that all the do .. end blocks are scoped. Any variable declared within a block will not be available outside it.

let myLiteralList: List<Int> = {1, 2, 3, 4, 5}  -- All collections are denoted with braces. List is a dynamically sized array.
let myConstructedList = List<Int>.new(1, 2, 3, 4 , 5)  -- Like most types, Lists can also be initialized with `new`. All lists are 1 indexed.

let myEmptyList = []   -- You can also create an empty list and add elements to it. This would be same as `let myEmptyList = List<Int>.new()`
myEmptyList.growth = (capacity : integer) -> integer => capacity * 2 end  -- You can also set the growth function for the list. This is a function that takes the current capacity and returns the new capacity
-- this allows you to customize your list for efficient inserts or memory usage. By Default, the growth function is `capacity * 1.5`

let myLiteralDict: Dict<String, Int> = {
    "one"   => 1, 
    "two"   => 2, 
    "three" => 3
}  -- Maps are denoted with braces and `=>` sign.

show myLiteralDict["one"]  -- Accessing a map value

-- All collections have map & reduce methods 
-- Map takes a function as an argument and applies it to all the elements of the collection. It returns a new collection with the results of the function
let myMappedList = myLiteralList.map<Int>((num) do num * 2 end)  -- The function is an anonymous function. It is a lambda function that takes a single argument
let myReducedList = myLiteralList.reduce<Int>(
    (num, acc) do 
        acc + num 
    end
)  -- The function is an anonymous function. It is a lambda function that takes two arguments

-- Use foreach to iterate over collections in a procedural way. Foreach is a statement and returns nothing. All statement blocks are within do .. end
foreach num in myLiteralList do  -- iterate over the list
    show num
end

foreach k, v in myLiteralDict do  -- iterate over the map
    show k, v
end

-- There is also a simple 'forever' loop construct:
let i = 1
loop do
    i += 1
    print('forever\n')
    if i > 5 => break end
end

foreach k, v in pairs(t) do  -- Pairs returns key/value pairs.
  print(k, v)
end


----------------------------------------------------
-- 1. Functions, Objects and Methods
----------------------------------------------------

add (x : Int, y: Int) -> Int => x + y end  -- Function definition. Functions do not need any keyword. Just the identifier and the arguments.
let sub = 
    (x : Int, y: Int) -> Int => 
        x - y 
    end  -- You can also define anonymous functions and assign them to variables

type BinaryFun = (x : Int, y: Int) -> Int -- a Function is itself a complex type made up of the input and return types
let mul: BinaryFun = (x, y) -> Int => x * y end  -- this also a valid way of declaring functions

let doMaths = x, y
    |> add
    |> sub
    |> mul
end  -- You can also use the |> operator to chain functions. The result of the previous function is passed as the first argument to the next function

let returnsTwo = () -> Int, Int => 1, 2 end  -- Functions can also return multiple values. The return type is a tuple
let a, b : Int = returnsTwo()  -- You can also destructure the return values

let p = add 2, 3  -- Function calls do not need parenthesis. They are optional


----------------------------------------------------
-- 1. Types and Objects
----------------------------------------------------
-- All type definitions are done using the define keyword. This also includes constant and complex type definitions.
-- All definitions are global and must be at the root level in the program scope. They cannot be nested within other definitions.

def PI = value<Float> (f) => -- where keyword allows you to define value types. the code block within the where keyword must resolve to a truthy value.
    & f == 3.14
end

def Password = where<String> (p) =>
    & p.length > 8
    & p.length < 20
end

def NewType = either
    | TypeA
    | TypeB
end

def TypeA = object
    , propA: int
    , propB: string
    , methodA: (int, string) -> int
end


def Direction = enum
    | North
    | South
    | East as object with name: string, age: int end 
    | West
end

def MyFunc = (int) -> int

-- An object is a complex type that can have properties and methods.
define Person as object 
    , pub name : String -- any property that is marked as pub is accessible outside the object
    , age : Int
    , sayHello => show "Hello, my name is " + self.name + "\n" end
end
let john = Person(name: "John")  -- Objects are created with the new keyword
john.sayHello()  -- Objects can have methods
show john.name  -- Objects can have properties

-- You can also create anonymous object instances using the obkect literal syntax and assign them to a variable
let mary : Person =  {
    , pub name : String = "Mary"
    , age : Int = 10
    , sayHello => show "Hello, my name is " + self.name + "\n" end
}

-- Nothing is a special type which can only have the nil value. Everything that returns nil must have the Nothing type
let shunya : Nothing = nil

-- Anything is a special type which can have any value, including nil. It essentially switches off the type checker for this variable
let eon : Anything = 10  

-- Something is a special type which can have any value except nil.
let piece : Something = 10 

-- Blocks are denoted with keywords like do/end:
while num < 50 do
  num = num + 1  -- No ++ or += type operators.
end

maybeString : String | Nothing = "Hello" -- you can define an anonymous union type in the variable declaration itself

-- Or using the define statement
define MaybeInteger as type
    | Integer 
    | Nothing 
end  -- You can define custom types using the define keyword. This is a union type. It can be either an Integer or nil

define Shape as either
    | Circle with {radius : Int, area : () -> Int => PI * radius * radius end}  -- You can also define types with properties and methods
    | Rectangle with {length : Int, breadth : Int, area : () -> Int => length * breadth end}
    | Squiggy  -- You can also define types without any properties or methods
end

let myCircle = Circle.new()  -- At the end of the day types are just Objects :)

define Direction as enum
    , North 
    , South 
    , East 
    , West
end  -- You can also define enums. Enums are just a special case of union types

-- 'or' and 'and' are short-circuited.
-- This is similar to the a?b:c operator in C/js:
ans = aBoolValue and 'yes' or 'no'  --> 'no'

karlSum = 0
for i = 1, 100 do  -- The range includes both ends.
  karlSum = karlSum + i
end

-- Use "100, 1, -1" as the range to count down:
fredSum = 0
for j = 100, 1, -1 do fredSum = fredSum + j end

-- In general, the range is begin, end[, step].




----------------------------------------------------
-- 2. Functions.
----------------------------------------------------

function fib(n)
  if n < 2 then return 1 end
  return fib(n - 2) + fib(n - 1)
end

-- Closures and anonymous functions are ok:
function adder(x)
  -- The returned function is created when adder is
  -- called, and remembers the value of x:
  return function (y) return x + y end
end
a1 = adder(9)
a2 = adder(36)
print(a1(16))  --> 25
print(a2(64))  --> 100

-- Returns, func calls, and assignments all work
-- with lists that may be mismatched in length.
-- Unmatched receivers are nil;
-- unmatched senders are discarded.

x, y, z = 1, 2, 3, 4
-- Now x = 1, y = 2, z = 3, and 4 is thrown away.

function bar(a, b, c)
  print(a, b, c)
  return 4, 8, 15, 16, 23, 42
end

x, y = bar('zaphod')  --> prints "zaphod  nil nil"
-- Now x = 4, y = 8, values 15...42 are discarded.

-- Functions are first-class, may be local/global.
-- These are the same:
function f(x) return x * x end
f = function (x) return x * x end

-- And so are these:
local function g(x) return math.sin(x) end
local g; g  = function (x) return math.sin(x) end
-- the 'local g' decl makes g-self-references ok.

-- Trig funcs work in radians, by the way.

-- Calls with one string param don't need parens:
print 'hello'  -- Works fine.


----------------------------------------------------
-- 3. Tables.
----------------------------------------------------

-- Tables = Lua's only compound data structure;
--          they are associative arrays.
-- Similar to php arrays or js objects, they are
-- hash-lookup dicts that can also be used as lists.

-- Using tables as dictionaries / maps:

-- Dict literals have string keys by default:
t = {key1 = 'value1', key2 = false}

-- String keys can use js-like dot notation:
print(t.key1)  -- Prints 'value1'.
t.newKey = {}  -- Adds a new key/value pair.
t.key2 = nil   -- Removes key2 from the table.

-- Literal notation for any (non-nil) value as key:
u = {['@!#'] = 'qbert', [{}] = 1729, [6.28] = 'tau'}
print(u[6.28])  -- prints "tau"

-- Key matching is basically by value for numbers
-- and strings, but by identity for tables.
a = u['@!#']  -- Now a = 'qbert'.
b = u[{}]     -- We might expect 1729, but it's nil:
-- b = nil since the lookup fails. It fails
-- because the key we used is not the same object
-- as the one used to store the original value. So
-- strings & numbers are more portable keys.

-- A one-table-param function call needs no parens:
function h(x) print(x.key1) end
h{key1 = 'Sonmi~451'}  -- Prints 'Sonmi~451'.

for key, val in pairs(u) do  -- Table iteration.
  print(key, val)
end

-- _G is a special table of all globals.
print(_G['_G'] == _G)  -- Prints 'true'.

-- Using tables as lists / arrays:

-- List literals implicitly set up int keys:
v = {'value1', 'value2', 1.21, 'gigawatts'}
for i = 1, #v do  -- #v is the size of v for lists.
  print(v[i])  -- Indices start at 1 !! SO CRAZY!
end
-- A 'list' is not a real type. v is just a table
-- with consecutive integer keys, treated as a list.

----------------------------------------------------
-- 3.1 Metatables and metamethods.
----------------------------------------------------

-- A table can have a metatable that gives the table
-- operator-overloadish behavior. Later we'll see
-- how metatables support js-prototype behavior.

f1 = {a = 1, b = 2}  -- Represents the fraction a/b.
f2 = {a = 2, b = 3}

-- This would fail:
-- s = f1 + f2

metafraction = {}
function metafraction.__add(f1, f2)
  sum = {}
  sum.b = f1.b * f2.b
  sum.a = f1.a * f2.b + f2.a * f1.b
  return sum
end

setmetatable(f1, metafraction)
setmetatable(f2, metafraction)

s = f1 + f2  -- call __add(f1, f2) on f1's metatable

-- f1, f2 have no key for their metatable, unlike
-- prototypes in js, so you must retrieve it as in
-- getmetatable(f1). The metatable is a normal table
-- with keys that Lua knows about, like __add.

-- But the next line fails since s has no metatable:
-- t = s + s
-- Class-like patterns given below would fix this.

-- An __index on a metatable overloads dot lookups:
defaultFavs = {animal = 'gru', food = 'donuts'}
myFavs = {food = 'pizza'}
setmetatable(myFavs, {__index = defaultFavs})
eatenBy = myFavs.animal  -- works! thanks, metatable

-- Direct table lookups that fail will retry using
-- the metatable's __index value, and this recurses.

-- An __index value can also be a function(tbl, key)
-- for more customized lookups.

-- Values of __index,add, .. are called metamethods.
-- Full list. Here a is a table with the metamethod.

-- __add(a, b)                     for a + b
-- __sub(a, b)                     for a - b
-- __mul(a, b)                     for a * b
-- __div(a, b)                     for a / b
-- __mod(a, b)                     for a % b
-- __pow(a, b)                     for a ^ b
-- __unm(a)                        for -a
-- __concat(a, b)                  for a .. b
-- __len(a)                        for #a
-- __eq(a, b)                      for a == b
-- __lt(a, b)                      for a < b
-- __le(a, b)                      for a <= b
-- __index(a, b)  <fn or a table>  for a.b
-- __newindex(a, b, c)             for a.b = c
-- __call(a, ...)                  for a(...)

----------------------------------------------------
-- 3.2 Class-like tables and inheritance.
----------------------------------------------------

-- Classes aren't built in; there are different ways
-- to make them using tables and metatables.

-- Explanation for this example is below it.

Dog = {}                                   -- 1.

function Dog:new()                         -- 2.
  newObj = {sound = 'woof'}                -- 3.
  self.__index = self                      -- 4.
  return setmetatable(newObj, self)        -- 5.
end

function Dog:makeSound()                   -- 6.
  print('I say ' .. self.sound)
end

mrDog = Dog:new()                          -- 7.
mrDog:makeSound()  -- 'I say woof'         -- 8.

-- 1. Dog acts like a class; it's really a table.
-- 2. function tablename:fn(...) is the same as
--    function tablename.fn(self, ...)
--    The : just adds a first arg called self.
--    Read 7 & 8 below for how self gets its value.
-- 3. newObj will be an instance of class Dog.
-- 4. self = the class being instantiated. Often
--    self = Dog, but inheritance can change it.
--    newObj gets self's functions when we set both
--    newObj's metatable and self's __index to self.
-- 5. Reminder: setmetatable returns its first arg.
-- 6. The : works as in 2, but this time we expect
--    self to be an instance instead of a class.
-- 7. Same as Dog.new(Dog), so self = Dog in new().
-- 8. Same as mrDog.makeSound(mrDog); self = mrDog.

----------------------------------------------------

-- Inheritance example:

LoudDog = Dog:new()                           -- 1.

function LoudDog:makeSound()
  s = self.sound .. ' '                       -- 2.
  print(s .. s .. s)
end

seymour = LoudDog:new()                       -- 3.
seymour:makeSound()  -- 'woof woof woof'      -- 4.

-- 1. LoudDog gets Dog's methods and variables.
-- 2. self has a 'sound' key from new(), see 3.
-- 3. Same as LoudDog.new(LoudDog), and converted to
--    Dog.new(LoudDog) as LoudDog has no 'new' key,
--    but does have __index = Dog on its metatable.
--    Result: seymour's metatable is LoudDog, and
--    LoudDog.__index = LoudDog. So seymour.key will
--    = seymour.key, LoudDog.key, Dog.key, whichever
--    table is the first with the given key.
-- 4. The 'makeSound' key is found in LoudDog; this
--    is the same as LoudDog.makeSound(seymour).

-- If needed, a subclass's new() is like the base's:
function LoudDog:new()
  newObj = {}
  -- set up newObj
  self.__index = self
  return setmetatable(newObj, self)
end

----------------------------------------------------
-- 4. Modules.
----------------------------------------------------


--[[ I'm commenting out this section so the rest of
--   this script remains runnable.

-- Suppose the file mod.lua looks like this:
local M = {}

local function sayMyName()
  print('Hrunkner')
end

function M.sayHello()
  print('Why hello there')
  sayMyName()
end

return M

-- Another file can use mod.lua's functionality:
local mod = require('mod')  -- Run the file mod.lua.

-- require is the standard way to include modules.
-- require acts like:     (if not cached; see below)
local mod = (function ()
  <contents of mod.lua>
end)()
-- It's like mod.lua is a function body, so that
-- locals inside mod.lua are invisible outside it.

-- This works because mod here = M in mod.lua:
mod.sayHello() -- Prints: Why hello there Hrunkner

-- This is wrong; sayMyName only exists in mod.lua:
mod.sayMyName()  -- error

-- require's return values are cached so a file is
-- run at most once, even when require'd many times.

-- Suppose mod2.lua contains "print('Hi!')".
local a = require('mod2')  -- Prints Hi!
local b = require('mod2')  -- Doesn't print; a=b.

-- dofile is like require without caching:
dofile('mod2.lua')  --> Hi!
dofile('mod2.lua')  --> Hi! (runs it again)

-- loadfile loads a lua file but doesn't run it yet.
f = loadfile('mod2.lua')  -- Call f() to run it.

-- load is loadfile for strings.
-- (loadstring is deprecated, use load instead)
g = load('print(343)')  -- Returns a function.
g()  -- Prints out 343; nothing printed before now.

--]]


